<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================= 
    Introduction to Service Design and Engineering Laboratory
    Description: ANT build script for the session on JAXB and Dozer 
    Author: cdparra
    
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE'
       
       # The target "download-ivy" and "install-ivy" will download the ivy jar and place it in the "ivy" folder
       # 
-->
<project name="Assignment1" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- PART 1: Ivy properties, download, installation and configuration -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- this targe will donwload ivy.jar if its inot in the "ivy" folder yet -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="install-ivy" depends="download-ivy" description="--> install ivy">

		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<!-- PART 2: General properties definitions -->
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="xjc.package" value="model.generated" />

	<!-- ================================= 
	          target: resolve downloads the dependencies to your lib folder              
	         ================================= -->
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]" />
	</target>


	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>

	<path id="run.path.id">
		<path refid="lib.path.id" />
		<fileset dir="${build.dir}">
			<include name="*.class" />
			<include name="**/*.class" />
			<exclude name="**/*Test*" />
		</fileset>
	</path>

	<!-- PART 3: compilation and execution targets for this session -->
	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>

	<target name="clean">
		<echo message="Clean has been called" />
		<delete dir="${build.dir}" />
		<echo message="${build.dir} has been deleted" />
		<delete dir="${src.dir}/${xjc.package}" />
		<echo message="${src.dir}/${xjc.package} has been deleted" />
		<delete file="people.xml" />
		<echo message="people.xml has been deleted" />
		<delete file="marshalledPeople.xml" />
		<echo message="marshaleldPeople.xml has been deleted" />
	</target>

	<target name="generate" depends="init">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
		</taskdef>
		<xjc schema="people.xsd" destdir="${src.dir}" package="${xjc.package}" />
	</target>

	<target name="compile" depends="init, generate">
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="execute.HPWriter">
		<echo message="Executing Health Profile Writer: will produce a people.xml in home folder" />
		<java classname="HealthProfileWriter" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.HPReader">
		<echo message="Executing HPReader. Printing in ${command} mode" />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<arg value="${command}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.HPReader.get">
		<echo message="Executing HPReader.get for attribute ${attribute}" />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<arg value="${attribute}" />
			<arg value="${id}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.HPReader.print">
		<echo message="Executing HPReader.print for element ${command}" />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<arg value="${command}" />
			<arg value="${id}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.HPReader.criteria">
		<echo message="Executing HPReader.criteria with specification ${command}" />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<arg value="${command}" />
			<arg value="${operator}" />
			<arg value="${weight}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.JAXBMarshaller">
		<echo message="Executing JAXBMarshaller" />
		<java classname="marshallOperations.JAXBMarshaller" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.JAXBUnMarshaller">
		<echo message="Executing JAXBUnMarshaller" />
		<java classname="marshallOperations.JAXBUnMarshaller" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.HPJson">
		<echo message="Executing Health Profile Converter for Json" />
		<java classname="marshallOperations.JSONConverter" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="execute.evaluation">
		<echo message="Executing evaluation target. Targets will be executed as indicated" />
		<antcall target="compile" />
		<antcall target="execute.HPWriter" />
		<antcall target="execute.HPReader">
					<param name="command" value="Detail" />
				</antcall>
		<antcall target="execute.HPReader.get">
			<param name="attribute" value="Weight" />
			<param name="id" value="5" />
		</antcall>
		<antcall target="execute.HPReader.get">
			<param name="attribute" value="Height" />
			<param name="id" value="5" />
		</antcall>
		<antcall target="execute.HPReader.print">
			<param name="command" value="Healthprofile" />
			<param name="id" value="5" />
		</antcall>
		<antcall target="execute.HPReader.criteria">
			<param name="command" value="OperatorWeight" />
			<param name="operator" value=">" />
			<param name="weight" value="90" />
		</antcall>

		<antcall target="execute.JAXBMarshaller">
		</antcall>
		<antcall target="execute.JAXBUnMarshaller">
		</antcall>
		<antcall target="execute.HPJson">
				</antcall>
	</target>


</project>